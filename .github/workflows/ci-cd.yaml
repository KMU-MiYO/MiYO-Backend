name: CI/CD Pipeline for Spring Boot on NCP

on:
  push:
    branches:
      - main
      - '**/main'
  pull_request:
    branches:
      - main
      - '**/main'
      - '**/feature/**'

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: 'gradle'

      - name: Grant execute permission to gradlew
        run: chmod +x gradlew

      - name: Build with Gradle
        run: ./gradlew build -x test # 테스트 코드는 빌드 시 제외하여 속도 향상

      - name: Docker Login to NCP Container Registry
        uses: docker/login-action@v2
        with:
          registry: ${{ secrets.NCP_CONTAINER_REGISTRY_URL }}
          username: ${{ secrets.NCP_ACCESS_KEY }}
          password: ${{ secrets.NCP_SECRET_KEY }}

      - name: Build and push Docker image
        run: |
          BRANCH_NAME=$(echo "${{ github.ref_name }}" | sed 's/[^a-zA-Z0-9._-]/-/g')
          IMAGE_TAG="${BRANCH_NAME}-$(git rev-parse --short HEAD)"
          IMAGE_NAME="${{ secrets.NCP_CONTAINER_REGISTRY_URL }}/my-spring-app:${IMAGE_TAG}"

          echo "Building image with tag: ${IMAGE_TAG}"
          docker build -t $IMAGE_NAME .
          docker push $IMAGE_NAME
          
          # 다음 배포 단계에서 사용할 수 있도록 이미지 이름을 저장합니다.
          echo "IMAGE_NAME=${IMAGE_NAME}" >> $GITHUB_ENV

      # [변경] ncp-iam-authenticator 설치 단계
      - name: Setup NCP IAM Authenticator
        run: |
          curl -o ncp-iam-authenticator -L https://github.com/NaverCloudPlatform/ncp-iam-authenticator/releases/latest/download/ncp-iam-authenticator_linux_amd64
          chmod +x ./ncp-iam-authenticator
          sudo mv ./ncp-iam-authenticator /usr/local/bin/

      # [변경] 동적 kubeconfig 생성 및 배포
      - name: Deploy to Kubernetes
        env:
          # authenticator가 API 키를 찾을 수 있도록 환경 변수 이름을 맞춰줍니다.
          NCLOUD_ACCESS_KEY: ${{ secrets.NCP_ACCESS_KEY }}
          NCLOUD_SECRET_KEY: ${{ secrets.NCP_SECRET_KEY }}
          NCLOUD_API_GW: "https://ncloud.apigw.ntruss.com"
        run: |
          # create-kubeconfig 명령으로 kubeconfig 파일을 동적으로 생성합니다.
          ncp-iam-authenticator create-kubeconfig \
            --clusterUuid ${{ secrets.NCP_K8S_CLUSTER_UUID }} \
            --region KR > ./kubeconfig.yml
          
          echo "Deploying image: ${{ env.IMAGE_NAME }}"

          # 생성된 kubeconfig 파일을 사용하여 배포를 진행합니다.
          sed "s|__IMAGE_NAME__|${{ env.IMAGE_NAME }}|g" k8s-deployment.yml | kubectl --kubeconfig=./kubeconfig.yml apply -f -